name: "Runs whole CI"

on:
  push:
    branches:
      - "main"

  release:
    types:
      - released

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Nix
        uses: nixbuild/nix-quick-install-action@v30

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - name: Build everything
        run: |
          nix build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        run: |
          nix build .#docker --option sandbox relaxed -L
          docker load < result
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request'

      - name: Push image tag
        run: |
          docker tag banana-split ghcr.io/ludat/banana-split:${{ github.sha }}
          docker push ghcr.io/ludat/banana-split:${{ github.sha }}
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request'

      - name: Push latest tag
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag banana-split ghcr.io/ludat/banana-split:latest
          docker push ghcr.io/ludat/banana-split:latest

  # - name: Trigger infra-cluster deploy
  #   # https://gitlab.com/10Pines/infra/infra-cluster
  #   # Infra cluster project id = 32472203
  #   if: github.ref == 'refs/heads/main'
  #   run: |
  #     curl --request POST \
  #       --form "variables[ENV]=prod" \
  #       --form "variables[APP]=banana-split" \
  #       --form "variables[HELM_VALUES]=revision: '${{ github.sha }}'" \
  #       "https://gitlab.com/api/v4/projects/32472203/trigger/pipeline?token=${{ secrets.GITLAB_INFRA_TOKEN }}&ref=main"
  helm-test:
    needs: [tests]
    # permissions:
    #   contents: write
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./charts/banana-split/
    if: |
      github.ref == 'refs/heads/main' ||
      github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Configure Git
      #   run: |
      #     git config user.name "$GITHUB_ACTOR"
      #     git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Pull image tag
        run: |
          docker pull ghcr.io/ludat/banana-split:${{ github.sha }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          registry: true
          config: .github/configs/cluster.yaml

      - name: Get nodes
        run: |
          kubectl get nodes -o wide

      - name: Run tests with helm
        run: |
          set -euo pipefail
          set -x
          NS=split-$RANDOM
          kubectl create namespace "$NS"
          kubectl config set-context kind-chart-testing --namespace "$NS"
          docker tag ghcr.io/ludat/banana-split:${{ github.sha }} kind-registry:5000/banana-split:latest
          docker push kind-registry:5000/banana-split:latest

          kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml
          kubectl wait --for=condition=available deployment ingress-nginx-controller -n ingress-nginx --timeout=30s

          kubectl apply --server-side -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/main/releases/cnpg-1.26.1.yaml
          kubectl wait --for=condition=available deployment/cnpg-controller-manager -n cnpg-system --timeout=30s

          # sleep 10

          helm install --wait --values=./ci-values.yaml banana-split-test . &
          HELM_PID=$!

          while ps -p "$HELM_PID" > /dev/null; do
            sleep 10
            kubectl logs -l role=app || true
            kubectl logs -l role=migration-start || true
            kubectl logs -l role=migration-complete || true
            kubectl get pods -o wide
          done;
          echo helm is done

          helm test --logs banana-split-test

      # - name: Push release tag
      #   if: github.event_name == 'release'
      #   run: |
      #     docker tag banana-split ghcr.io/ludat/banana-split:${{ github.event.release.tag_name }}
      #     docker push ghcr.io/ludat/banana-split:${{ github.event.release.tag_name }}
